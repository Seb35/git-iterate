#!/bin/bash
#
# Execute Git commands on multiple directories and subdirectories
# > git iterate [-v|-V] DIR1 DIR2 ... -- GIT_COMMAND ...
#
# Parameters:
#   -v: Tell in standard error output in which directory the Git command is operating
#   -V: Tell in standard output in which directory the Git command is operating
#   DIR*: list of super-directories, Git commands will be executed on each valid sub-directory
#   GIT_COMMAND and next parameters: Git commands to be executed on each Git directory

IFS=$'\n'
export GIT_PROGRESS_DELAY=3600

function search_git_folders() {
  if [ ! -d "$1" ]
  then
    return
  elif [ ! -f "$1/.git" -a ! -d "$1/.git" -a ! -d "$1/refs" ]
  then
    for folder in $(find "$1" -mindepth 1 -maxdepth 1 -type d)
    do
      search_git_folders "$folder"
    done
  else
    git --git-dir="$1" branch >/dev/null 2>&1
    if [ $? = 0 ]
    then
      echo "$1"
    else
      git --git-dir="$1/.git" branch >/dev/null 2>&1
      if [ $? = 0 ]
      then
        echo "$1"
      else
        for folder in $(find "$1" -mindepth 1 -maxdepth 1 -type d)
        do
          search_git_folders "$folder"
        done
      fi
    fi
  fi
}

# Get parameters and folders
folders=""
foreach="false"
options=""
quiet="false"
display_only="false"
clean=""
stash=""
tracking_head=""
behind=""
ahead=""
detached=""
branch_head=""
some_branch=""
some_ref=""
branch_type=""
some_remote=""
ref_ff_to_ref=""
ref_strict_ff_to_ref=""
submodule=""
conflict=""
git_config_key_value=""
for folder in "$@"
do
  if [ -z "$options" ]; then
    if [ "$folder" = "-q" ]; then
      shift
      quiet="moderate"
      continue
    elif [ "$folder" = "-qq" -o "$folder" = "--quiet" ]; then
      shift
      quiet="true"
      continue
    elif [ "$folder" = "--to-be-cleaned" ]; then
      shift
      clean="-3"
      continue
    elif [ "$folder" = "--very-unclean" ]; then
      shift
      clean="-2"
      continue
    elif [ "$folder" = "--unclean" ]; then
      shift
      clean="-1"
      continue
    elif [ "$folder" = "--almost-clean" ]; then
      shift
      clean="1"
      continue
    elif [ "$folder" = "--quite-clean" ]; then
      shift
      clean="2"
      continue
    elif [ "$folder" = "--clean" ]; then
      shift
      clean="3"
      continue
    elif [ "$folder" = "--very-clean" ]; then
      shift
      clean="4"
      continue
    elif [ "$folder" = "--very-very-clean" ]; then
      shift
      clean="5"
      continue
    elif [ "$folder" = "--has-stash" ]; then
      shift
      stash="1"
      continue
    elif [ "$folder" = "--has-no-stash" ]; then
      shift
      stash="0"
      continue
    elif [ "$folder" = "--tracking-head" ]; then
      shift
      tracking_head="1"
      continue
    elif [ "$folder" = "--not-tracking-head" ]; then
      shift
      tracking_head="0"
      continue
    elif [ "$folder" = "--late" -o "$folder" = "--behind" ]; then
      shift
      behind="1"
      continue
    elif [ "$folder" = "--not-late" -o "$folder" = "--not-behind" ]; then
      shift
      behind="-1"
      continue
    elif [ "$folder" = "--ahead" ]; then
      shift
      ahead="1"
      continue
    elif [ "$folder" = "--not-ahead" ]; then
      shift
      ahead="-1"
      continue
    elif [ "$folder" = "--late-or-ahead" -o "$folder" = "--behind-or-ahead" ]; then
      shift
      behind="2"
      ahead="2"
      continue
    elif [ "$folder" = "--detached" ]; then
      shift
      detached="true"
      continue
    elif [ "$folder" = "--not-detached" ]; then
      shift
      detached="false"
      continue
    elif [ "`echo -n "$folder"|cut -c1-9`" = "--branch=" ]; then
      shift
      branch_head=`echo -n "$folder"|cut -c10-`
      continue
    elif [ "`echo -n "$folder"|cut -c1-19`" = "--with-some-branch=" ]; then
      shift
      some_branch=`echo -n "$folder"|cut -c20-`
      some_branch=`echo -n ",$some_branch,"`
      continue
    elif [ "`echo -n "$folder"|cut -c1-16`" = "--with-some-ref=" ]; then
      shift
      some_ref=`echo -n "$folder"|cut -c17-`
      some_ref=`echo -n ",$some_ref,"`
      continue
    elif [ "`echo -n "$folder"|cut -c1-27`" = "--with-some-branch-of-type=" ]; then
      shift
      branch_type=`echo -n "$folder"|cut -c28-`
      branch_type=`echo -n ",$branch_type,"`
      continue
    elif [ "`echo -n "$folder"|cut -c1-18`" = "--with-git-config=" ]; then
      shift
      git_config_key_value=`echo -n "$folder"|cut -c19-`
      continue
    elif [ "`echo -n "$folder"|cut -c1-19`" = "--with-some-remote=" ]; then
      shift
      some_remote=`echo -n "$folder"|cut -c20-`
      some_remote=`echo -n ",$some_remote,"`
      continue
    elif [ "`echo -n "$folder"|cut -c1-16`" = "--ref-ff-to-ref=" ]; then
      shift
      ref_ff_to_ref=`echo -n "$folder"|cut -c17-`
      continue
    elif [ "`echo -n "$folder"|cut -c1-23`" = "--ref-strict-ff-to-ref=" ]; then
      shift
      ref_strict_ff_to_ref=`echo -n "$folder"|cut -c24-`
      continue
    elif [ "$folder" = "--submodule" ]; then
      shift
      submodule="1"
      continue
    elif [ "$folder" = "--not-submodule" ]; then
      shift
      submodule="0"
      continue
    elif [ "$folder" = "--conflict" ]; then
      shift
      conflict="1"
      continue
    elif [ "$folder" = "--no-conflict" ]; then
      shift
      conflict="0"
      continue
    fi
  fi
  options="1"
  shift
  if [ "$folder" = "--" ]
  then
    break
  elif [ "$folder" = "foreach" ]
  then
    foreach="true"
    break
  fi
  folders="$folders"$'\n'"$folder"
done

# If no folder is given, use local directory (recursively)
if [ "$folders" = "" ]
then
  folders=*
fi

#echo quiet="$quiet"
#echo foreach="$foreach"
#echo clean="$clean"
#echo folders="$folders"
#echo $behind
#echo $ahead

if [ "$#" = 0 ]; then
  display_only="true"
fi

# Iterate over each folder
first="true"
for folder in $folders
do
  folders=$(search_git_folders "$folder"|sort)
  for git_folder in $folders
  do
    cd "$git_folder"
    # First check if the Git repo is eligible regarding its status and remote-tracking status
    if [ "$clean" = "-3" ]; then
      status1=$(git status --short)
      status2=$(git stash list)
      status3=$(LANG="en" git branch --list -vv)
      status4=$(echo "$status3"|grep "^*"|grep -F -e " behind " -e " ahead ")
      status5=$(echo "$status3"|grep "^* (HEAD detached at ")
      # Display if ( $status1 !== "" || $status2 !== "" || $status3 === "" || $status4 !== "" || $status5 !== "" )
      if [ -z "$status1" -a -z "$status2" -a -n "$status3" -a -z "$status4" -a -z "$status5" ]; then
        cd "$OLDPWD"
        continue
      fi
    elif [ "$clean" = "-2" ]; then
      status=$(git status --short|grep -v "^??")
      if [ -z "$status" ]; then
        cd "$OLDPWD"
        continue
      fi
    elif [ "$clean" = "-1" ]; then
      status=$(git status --short)
      if [ -z "$status" ]; then
        cd "$OLDPWD"
        continue
      fi
    elif [ "$clean" = "1" ]; then
      status1=$(git status --short)
      status2=$(echo "$status1"|grep -v "^??")
      status3=$(git stash list)
      # Display if ( ( status1 !== "" && status2 === "" ) || ( status2 === "" && status3 !== "" ) )
      # Display if status2 === "" && ( status1 !== "" || status3 !== "" )
      # Do not display if ( ( status1 === "" || status2 !== "" ) && status3 === "" )
      # Do not display if status2 !== "" || ( status1 === "" && status3 === "" )
      #if [ \( -z "$status1" -o -n "$status2" \) -a -z "$status3" ]; then
      if [ -n "$status2" -o \( -z "$status1" -a -z "$status3" \) ]; then
        cd "$OLDPWD"
        continue
      fi
    elif [ "$clean" = "2" ]; then
      status=$(git status --short|grep -v "^??")
      if [ -n "$status" ]; then
        cd "$OLDPWD"
        continue
      fi
    elif [ "$clean" = "3" ]; then
      status=$(git status --short)
      if [ -n "$status" ]; then
        cd "$OLDPWD"
        continue
      fi
    elif [ "$clean" = "4" ]; then
      status=$(git status --ignored --short)
      if [ -n "$status" ]; then
        cd "$OLDPWD"
        continue
      fi
    elif [ "$clean" = "5" ]; then
      status1=$(git status --ignored --short)
      status2=$(git stash list)
      if [ -n "$status1" -o -n "$status2" ]; then
        cd "$OLDPWD"
        continue
      fi
    fi
    if [ -n "$stash" ]; then
      status=$(git stash list)
      if [ -n "$status" -a "$stash" = '0' ]; then
        cd "$OLDPWD"
        continue
      elif [ -z "$status" -a "$stash" = '1' ]; then
        cd "$OLDPWD"
        continue
      fi
    fi
    if [ "$tracking_head" = "1" ]; then
      symbolic_head=$(LANG="en" git rev-parse --symbolic-full-name HEAD)
      is_branch=`echo -n "$symbolic_head"|cut -c 1-11`
      if [ "$is_branch" != "refs/heads/" ]; then
        cd "$OLDPWD"
        continue
      fi
      branch=`echo -n "$symbolic_head"|cut -c 12-`
      status1=$(LANG="en" git config "branch.$branch.remote")
      status2=$(LANG="en" git config "branch.$branch.merge")
      if [ -z "$status1" -o -z "$status2" ]; then
        cd "$OLDPWD"
        continue
      fi
    elif [ "$tracking_head" = "0" ]; then
      symbolic_head=$(LANG="en" git rev-parse --symbolic-full-name HEAD)
      is_branch=`echo -n "$symbolic_head"|cut -c 1-11`
      if [ "$is_branch" != "refs/heads/" ]; then
        cd "$OLDPWD"
        continue
      fi
      branch=`echo -n "$symbolic_head"|cut -c 12-`
      status1=$(LANG="en" git config "branch.$branch.remote")
      status2=$(LANG="en" git config "branch.$branch.merge")
      if [ -n "$status1" -a -n "$status2" ]; then
        cd "$OLDPWD"
        continue
      fi
    fi
    behind_found="0"
    if [ "$behind" = "1" -o "$behind" = "2" ]; then
      # TODO could be improved: there are false positive if the commit message contains " behind "
      status1=$(LANG="en" git branch --list -vv)
      status2=$(echo "$status1"|grep "^*"|grep -F " behind ")
      # Display if ( status1 !== "" && status2 !== "" )
      if [ -z "$status1" -o -z "$status2" ]; then
        if [ "$behind" != "2" -o "$ahead" != "2" ]; then
          cd "$OLDPWD"
          continue
        fi
      else
        behind_found="1"
      fi
    elif [ "$behind" = "-1" ]; then
      # TODO could be improved: there are false positive if the commit message contains " behind "
      status1=$(LANG="en" git branch --list -vv)
      status2=$(echo "$status1"|grep "^*"|grep -F " behind ")
      # Display if ( status1 !== "" && status2 === "" )
      if [ -z "$status1" -o -n "$status2" ]; then
        cd "$OLDPWD"
        continue
      fi
    fi
    if [ "$ahead" = "1" -o "$ahead" = "2" ]; then
      # TODO could be improved: there are false positive if the commit message contains " ahead "
      status1=$(LANG="en" git branch --list -vv)
      status2=$(echo "$status1"|grep "^*"|grep -F " ahead ")
      # Display if ( status1 !== "" && status2 !== "" )
      if [ -z "$status1" -o -z "$status2" ]; then
        if [ "$behind" != "2" -o "$ahead" != "2" -o "$behind_found" != "1" ]; then
          cd "$OLDPWD"
          continue
        fi
      fi
    elif [ "$ahead" = "-1" ]; then
      # TODO could be improved: there are false positive if the commit message contains " ahead "
      status1=$(LANG="en" git branch --list -vv)
      status2=$(echo "$status1"|grep "^*"|grep -F " ahead ")
      # Display if ( status1 !== "" && status2 === "" )
      if [ -z "$status1" -o -n "$status2" ]; then
        cd "$OLDPWD"
        continue
      fi
    fi
    if [ "$detached" = "true" ]; then
      status1=$(LANG="en" git branch --list -vv)
      status2=$(echo "$status1"|grep "^* (HEAD detached at ")
      # Display if ( status1 !== "" && status2 !== "" )
      if [ -z "$status1" -o -z "$status2" ]; then
        cd "$OLDPWD"
        continue
      fi
    elif [ "$detached" = "false" ]; then
      status1=$(LANG="en" git branch --list -vv)
      status2=$(echo "$status1"|grep "^* (HEAD detached at ")
      # Display if ( status1 !== "" && status2 === "" )
      if [ -z "$status1" -o -n "$status2" ]; then
        cd "$OLDPWD"
        continue
      fi
    fi
    if [ -n "$branch_head" ]; then
      symbolic_head=$(LANG="en" git rev-parse --symbolic-full-name HEAD)
      if [ "$symbolic_head" != "refs/heads/$branch_head" ]; then
        cd "$OLDPWD"
        continue
      fi
    fi
    if [ -n "$some_ref" ]; then
      refs=$(LANG="en" git for-each-ref refs/** --format='%(refname)')
      if [ -z "$refs" ]; then
        cd "$OLDPWD"
        continue
      fi
      found="false"
      for ref in $refs; do
        if echo "$some_ref"|grep -q ",$ref,"; then
          found="true"
          break
        fi
      done
      if [ "$found" = "false" ]; then
        cd "$OLDPWD"
        continue
      fi
    fi
    if [ -n "$some_branch" ]; then
      branches=$(LANG="en" git for-each-ref refs/heads/** --format='%(refname)'|cut -c12-)
      if [ -z "$branches" ]; then
        cd "$OLDPWD"
        continue
      fi
      found="false"
      for branch in $branches; do
        if echo "$some_branch"|grep -q ",$branch,"; then
          found="true"
          break
        fi
      done
      if [ "$found" = "false" ]; then
        cd "$OLDPWD"
        continue
      fi
    fi
    if [ -n "$some_remote" ]; then
      remotes=$(LANG="en" git remote show)
      if [ -z "$remotes" ]; then
        cd "$OLDPWD"
        continue
      fi
      found="false"
      for remote in $remotes; do
        if echo "$some_remote"|grep -q ",$remote,"; then
          found="true"
          break
        fi
      done
      if [ "$found" = "false" ]; then
        cd "$OLDPWD"
        continue
      fi
    fi
    if [ -n "$ref_ff_to_ref" -o -n "$ref_strict_ff_to_ref" ]; then
      if [ -n "$ref_ff_to_ref" ]; then
        ref1=$(echo "$ref_ff_to_ref"|cut -d, -f1)
        ref2=$(echo "$ref_ff_to_ref"|cut -d, -f2)
      else
        ref1=$(echo "$ref_strict_ff_to_ref"|cut -d, -f1)
        ref2=$(echo "$ref_strict_ff_to_ref"|cut -d, -f2)
      fi
      nbrefs=$(LANG="en" git for-each-ref --format='%(refname)' "$ref1" "$ref2"|wc -l)
      ref1=$(LANG="en" git for-each-ref --format='%(objectname)' "$ref1")
      if [ "$nbrefs" != 2 ]; then
        cd "$OLDPWD"
        continue
      fi
      mergebase=$(LANG="en" git merge-base "$ref1" "$ref2")
      if [ "$mergebase" != "$ref1" ]; then
        cd "$OLDPWD"
        continue
      fi
      if [ -n "$ref_strict_ff_to_ref" ]; then
        ref2=$(LANG="en" git for-each-ref --format='%(objectname)' "$ref2")
        if [ "$mergebase" = "$ref2" ]; then
          cd "$OLDPWD"
          continue
        fi
      fi
    fi
    if [ -n "$branch_type" ]; then
      branches=$(LANG="en" git for-each-ref refs/heads/** --format='%(refname)'|cut -c12-)
      if [ -z "$branches" ]; then
        continue
      fi
      found="false"
      for branch in $branches; do
        type=$(LANG="en" git config --local --get "branch.$branch.type")
        if [ -z "$type" ]; then
          continue
        fi
        if echo "$branch_type"|grep -q ",$type,"; then
          found=true
          break
        fi
      done
      if [ "$found" = "false" ]; then
        cd "$OLDPWD"
        continue
      fi
    fi
    if [ -n "$git_config_key_value" ]; then
      git_key=$(echo "$git_config_key_value"|cut -d= -f1)
      git_values=$(echo "$git_config_key_value"|cut -d= -f2)
      git_values=`echo -n ",$git_values,"`
      git_value=$(LANG="en" git config --local --get "$git_key")
      if [ -z "$git_value" ]; then
        cd "$OLDPWD"
        continue
      fi
      if ! echo "$git_values"|grep -q ",$git_value,"; then
        cd "$OLDPWD"
        continue
      fi
    fi
    if [ -n "$conflict" ]; then
      status=$(LANG="en" git -C "$OLDPWD" status --short -- "$git_folder"|cut -d' ' -f1)
      if [ "$status" = "UU" -a "$conflict" = "0" ]; then
        cd "$OLDPWD"
        continue
      elif [ "$status" != "UU" -a "$conflict" = "1" ]; then
        cd "$OLDPWD"
        continue
      fi
    fi
    if [ -n "$submodule" ]; then
      if ! git -C "$OLDPWD" branch >/dev/null 2>&1; then
        cd "$OLDPWD"
        continue
      fi
      status=$(LANG="en" git -C "$OLDPWD" ls-files --cached --stage --full-name -- "$git_folder"|cut -d' ' -f1)
      if [ "$status" = "160000" -a "$submodule" = "0" ]; then
        cd "$OLDPWD"
        continue
      elif [ "$status" != "160000" -a "$submodule" = "1" ]; then
        cd "$OLDPWD"
        continue
      fi
    fi
    if [ "$display_only" = "true" ]; then
      echo "$git_folder"
      cd "$OLDPWD"
      continue
    fi
    if [ "$quiet" = "true" ]
    then
      if [ "$foreach" = "false" ]
      then
        errors=$(git $@ 2>&1)
      else
        errors=$($@ 2>&1)
      fi
      if [ "$?" != 0 ]
      then
        if [ "$first" = "false" ]
        then
          echo >&2
        fi
        first="false"
        echo $git_folder >&2
        echo "$errors" >&2
        echo "Error $? in $git_folder" >&2
      fi
    else
      if [ "$quiet" != "moderate" ]
      then
        echo -e "\033[1m$git_folder\033[0m"
      fi
      if [ "$foreach" = "false" ]
      then
        git $@
        errors="$?"
      else
        eval $@
        errors="$?"
      fi
      if [ "$errors" != 0 ]
      then
        echo "Error $errors in $git_folder" >&2
      fi
    fi
    cd "$OLDPWD"
  done
done
